"use strict";(self.webpackChunkmmsp_station=self.webpackChunkmmsp_station||[]).push([[46745],{46745:(e,t,n)=>{n.r(t),n.d(t,{TextureCompressionWorkerOutput:()=>d,compress:()=>p,compressRGBADataToKTX2:()=>m,createTextureDataKTX2:()=>C,initializeBasisEncoder:()=>f,initializeDXTEncoder:()=>w});var a=n(28899);let r;var s=n(45235);let i;var l=n(93345);let o,c,u=null,h=null;class d{constructor(e,t){this.internalFormat=e,this.compressedTexture=t}}async function p(e){let t;if(t=e.data instanceof ImageBitmap?function(e){const t=new OffscreenCanvas(e.width,e.height),n=t.getContext("2d");return n.drawImage(e,0,0),n.getImageData(0,0,t.width,t.height).data}(e.data):function(e,t,n,a,r){const s=new Uint8ClampedArray(e).subarray(0,t*n*a);if(!r)return s;const i=new Uint8ClampedArray(s.length),l=t*a;for(let o=0;o<n;o++){const e=o*l,t=(n-o-1)*l;i.set(s.subarray(e,e+l),t)}return i}(e.data,e.width,e.height,e.components,e.needsFlip),e.hasS3TC){h||await w();const n=new Uint8Array(t.length);if(h?.encode(t,e.width,e.height,e.preMultiplyAlpha,n)){const e=function(e,t){const n=new Int32Array(e.buffer,e.byteOffset,T);let a,r;switch(n[b]){case R:a=8,r=l.CQ.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case X:a=16,r=l.CQ.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case B:a=16,r=l.CQ.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let s=1,i=n[E],o=n[g];(3&i||3&o)&&(i=i+3&-4,o=o+3&-4);const c=i,u=o;let h,d;n[A]&S&&!1!==t&&(s=Math.max(1,n[_]));let p=e.byteOffset+n[y]+4;const f=[];for(let l=0;l<s;++l)d=(i+3>>2)*(o+3>>2)*a,h=new Uint8Array(e.buffer,p,d),f.push(h),p+=d,i=Math.max(1,i>>1),o=Math.max(1,o>>1);return{textureData:{type:"compressed",levels:f},internalFormat:r,width:c,height:u}}(n,!0),t=[n.buffer];return{result:new d(e?.internalFormat??null,e?.textureData??null),transferList:t}}return{result:new d(null,null)}}if(e.hasETC){if(u||await f(),e.preMultiplyAlpha&&!h&&await w(),e.preMultiplyAlpha){const n=new Uint8ClampedArray(t.length);h?.premultiply(new Uint8Array(t),e.width,e.height,n),t=n}const n=await m(t,e.width,e.height,e.hasMipmap),a=n?await C(n):null,r=a?.compressedTexture?.levels.map(e=>e.buffer)||[];return{result:new d(a?.internalFormat??null,a?.compressedTexture??null),transferList:r}}return{result:new d(null,null)}}async function f(){u||(u=await(o??=(r??=(async()=>{const e=await n.e(56378).then(n.bind(n,56378)),t=await e.default({locateFile:e=>(0,a.s)(`esri/libs/basisu/${e}`)});return t.initializeBasis(),t})(),r)))}async function w(){h||(h=await(c??=(i??=(async()=>{const e=await n.e(53996).then(n.bind(n,53996));return await e.default({locateFile:e=>(0,a.s)(`esri/libs/dxtEncoder/${e}`)})})(),i)))}async function m(e,t,n,a){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:255,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],l=arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(!u)return null;const o=new u.BasisEncoder;o.setPerceptual(!l),o.setCheckForAlpha(!0),o.setForceAlpha(!1),o.setRenormalize(l),o.setMipGen(a),o.setMipSRGB(!l),o.setCreateKTX2File(!0),o.setKTX2SRGBTransferFunc(!l),o.setQualityLevel(r),o.setCompressionLevel(s);const c=new Uint8Array(e.byteLength);o.setSliceSourceImage(0,new Uint8Array(e),t,n,i);const h=o.encode(c),d=new Uint8Array(c.buffer,0,h),p=new u.KTX2File(new Uint8Array(d));return p.isValid()?(o.delete(),d):(p.close(),p.delete(),o.delete(),null)}async function C(e){if(!u)return new d(null,null);const t=new u.KTX2File(new Uint8Array(e));t.startTranscoding();const[n,a]=t.getHasAlpha()?[s.n.ETC2_RGBA,l.CQ.COMPRESSED_RGBA8_ETC2_EAC]:[s.n.ETC1_RGB,l.CQ.COMPRESSED_RGB8_ETC2],r=t.getLevels(),i=[];for(let s=0;s<r;s++)i.push(new Uint8Array(t.getImageTranscodedSizeInBytes(s,0,0,n))),t.transcodeImage(i[s],s,0,0,n,0,-1,-1);return t.close(),t.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:i}}}const T=31,y=1,A=2,g=3,E=4,_=7,b=21,S=131072;function D(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const R=D("DXT1"),X=D("DXT3"),B=D("DXT5")}}]);
//# sourceMappingURL=46745.1e7244a0.chunk.js.map