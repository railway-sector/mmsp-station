"use strict";(self.webpackChunkmmsp_station=self.webpackChunkmmsp_station||[]).push([[99845],{74159:(e,t,s)=>{s.d(t,{V:()=>r,f:()=>a});var n=s(19247),o=s(32186);function r(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return new n.A({x:e[s.originX],y:e[s.originY],z:e[s.originZ],spatialReference:t})}function a(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return new o.A({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}const i={originX:"originX",originY:"originY",originZ:"originZ",translationX:"translationX",translationY:"translationY",translationZ:"translationZ",scaleX:"scaleX",scaleY:"scaleY",scaleZ:"scaleZ",rotationX:"rotationX",rotationY:"rotationY",rotationZ:"rotationZ",rotationDeg:"rotationDeg"}},99845:(e,t,s)=>{s.d(t,{uploadAssets:()=>E});var n=s(3825),o=s(81806),r=s(76460),a=s(50346),i=s(91417),l=s(90534),c=s(49723),u=s(13312),p=s(57045),f=s(45652);const d={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};var m=s(13096),g=s(54901),h=s(87663);function w(e){return new y(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},arguments.length>2?arguments[2]:void 0)}class y{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},s=arguments.length>2?arguments[2]:void 0;if(this.onProgress=t,this.taskName=s,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let t=0;t<e;t++){const s=t,n=1/e;this._weights[s]=n,this._progressMap.set(s,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[t,s]of this._progressMap.entries())e+=s*this._weights[t];if(1===e&&(0,o.A)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[t,s]of this._timingsMap){const n=Math.round(s.end-s.start)/1e3,o=Math.round(n/e*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:n,relativeTime:o})}}this.onProgress(e)}setProgress(e,t){if(this._progressMap.set(e,t),(0,o.A)("enable-feature:esri-3dofl-upload-timings")){const s=performance.now();this._startTime??=s;const n=(0,h.tE)(this._timingsMap,e,()=>({start:s,end:0}));1===t&&(n.end=s)}this.emitProgress()}simulate(e,t){return T(t=>this.setProgress(e,t),t)}makeOnProgress(e){return t=>this.setProgress(e,t)}}function T(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e=>{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:F;const s=performance.now();e(0);const n=setInterval(()=>{const n=performance.now()-s,o=1-Math.exp(-n/t);e(o)},j);return(0,g.hA)(()=>{clearInterval(n),e(1)})}function A(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:v;return(0,i.gr)((0,i.Kp)(e*b/t))}const v=10,P=10,b=8e-6,j=(0,i.l5)(50),F=(0,i.l5)(1e3),M=1e6,N=20*M,S=2e9,D=3;async function _(e,t,s){let{data:o,name:r,description:i}=e,c=null;try{const e=(0,l.fj)(t,"uploads"),p=(0,l.fj)(e,"info"),{data:f}=await(0,n.A)(p,{query:{f:"json"},responseType:"json"});(0,a.Te)(s);const d=(0,m.Wo)(t),g=f.maxUploadFileSize*M,h=d?S:g,y=d?Math.min(N,g):N;if(o.size>h)throw new Error("Data too large");const T=(0,l.fj)(e,"register"),{data:v}=await(0,n.A)(T,{query:{f:"json",itemName:(u=r,u.replaceAll("/","_").replaceAll("\\","_")),description:i},responseType:"json",method:"post"});if((0,a.Te)(s),!v.success)throw new Error("Registration failed");const{itemID:P}=v.item;c=(0,l.fj)(e,P);const b=(0,l.fj)(c,"uploadPart"),j=Math.ceil(o.size/y),F=new Array;for(let t=0;t<j;++t)F.push(o.slice(t*y,Math.min((t+1)*y,o.size)));const _=F.slice().reverse(),k=new Array,x=w(j,s?.onProgress,"uploadItem"),R=async()=>{for(;0!==_.length;){const e=F.length-_.length,t=_.pop(),o=new FormData,r=x.simulate(e,A(t.size));try{o.append("f","json"),o.append("file",t),o.append("partId",`${e}`);const{data:r}=await(0,n.A)(b,{timeout:0,body:o,responseType:"json",method:"post"});if((0,a.Te)(s),!r.success)throw new Error("Part upload failed")}finally{r.remove()}}};for(let t=0;t<D&&0!==_.length;++t)k.push(R());await Promise.all(k);const E=(0,l.fj)(c,"commit"),{data:C}=await(0,n.A)(E,{query:{f:"json",parts:F.map((e,t)=>t).join(",")},responseType:"json",method:"post"});if((0,a.Te)(s),!C.success)throw new Error("Commit failed");return C.item}catch(p){if(null!=c){const e=(0,l.fj)(c,"delete");await(0,n.A)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw p}var u}var k=s(19463),x=s(66776),R=s(74159);async function E(e,t,s){const n=e.length;if(!n)return s?.onProgress?.(1),[];const r=w(n,s?.onProgress,"uploadAssets");return Promise.all(e.map((e,n)=>async function(e,t,s){let{layer:n,ongoingUploads:r}=t;const m=r.get(e);if(m)return m;if(!function(e){return!!e.infoFor3D&&!!e.url}(n))throw new f.Wt;if(function(e,t){const{parsedUrl:s}=t;return null!=s&&e.metadata.externalSources.some(e=>(0,p.eN)(e,s))}(e,n))return s?.onProgress?.(1),e;const g=async function(e,t,s){const{metadata:n}=e,{displaySource:r}=n,m=C(r?.source,t,{checkForConversionRequired:(0,o.A)("enable-feature:georeferenced-uploads")}),g=null!=m?async function(e,t,s){return{source:{type:"service",assets:await U(e,t,s)},original:!0,unitConversionDisabled:!0}}(m,t,s):n.externalSources.length>0?async function(e,t,s){const n=q(t),{externalSources:r}=e.metadata,a=function(e,t){for(const s of e){const e=C(s.source,t);if(e)return e}return null}(r,t);if(!a)throw new f.xY;const c=w(d.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),m={type:"service",assets:await U(a,t,{onProgress:c.makeOnProgress("uploadEditSource")})};e.addExternalSources([{source:m,original:!0}]);const g=a.reduce((e,t)=>{let{asset:s}=t;return s instanceof File?e+s.size:e},0),h=c.simulate("serviceAssetsToGlb",function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:P;return(0,i.gr)((0,i.Kp)(e*b/t))}(g));try{const{source:r,transform:a,origin:i}=await async function(e,t,s){let{assets:n}=e;const r=n.map(e=>{let{assetName:t,parts:s}=e;return{assetName:t,assetHash:s[0].partHash}});let i;try{const e=(0,l.fj)(t.parsedUrl.path,"convert3D"),n=t.capabilities?.operations.supportsAsyncConvert3D;i=(await(n?Z:Y)(e,{query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:s,async:n},responseType:"json",timeout:0})).data}catch(a){throw new f.MT}return function(e,t){const s={source:{type:"service",assets:t.assets.map(t=>{const s=(0,k.R_)(t.contentType,e.infoFor3D.supportedFormats);if(!s)throw new f.H2(s);return new p.Qp(t.assetName,t.contentType,[new p.Bq(t.assetURL,t.assetHash)])})},origin:void 0,transform:void 0};if((0,o.A)("enable-feature:georeferenced-uploads")&&t.transform){if(s.transform=(0,R.f)(t.transform),t.spatialReference){const e=u.A.fromJSON(t.spatialReference);s.origin=(0,R.V)(t.transform,e)}}else s.transform=(0,x.Z)(e.spatialReference);return s}(t,i)}(m,t,n);return e.transform=a,i&&(e.metadata.georeferenced=!0,s?.useAssetOrigin&&(e.vertexSpace.origin=[i.x,i.y,i.z??0],e.spatialReference=i.spatialReference)),{source:r,unitConversionDisabled:!0}}finally{h.remove()}}(e,t,s):async function(e,t,s){const n=w(d.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),o=async function(e,t,s){const n=q(t),o=await e.load(s),r=await o.toBinaryGLTF({origin:o.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return(0,a.Te)(s),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${(0,c.yS)()}.glb`,assetType:n}}(e,t,{...s,onProgress:n.makeOnProgress("meshToAssetBlob")});return{source:{type:"service",assets:await B([o],t,{...s,onProgress:n.makeOnProgress("uploadAssetBlobs")})},extent:e.extent.clone(),original:!0}}(e,t,s),h=await g;return(0,a.Te)(s),e.addExternalSources([h]),e}(e,n,s);r.set(e,g);try{await g}finally{r.delete(e)}return e}(e,t,{...s,onProgress:r.makeOnProgress(n)})))}function C(e,t){let{infoFor3D:s}=t,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e)return null;const o=(0,p.WN)(e);if(!o)return null;const{supportedFormats:r,editFormats:a}=s,i=new Array,l=(0,k.ND)(s),c=(0,k.nr)(s);let u=!1;for(const p of o){const e=I(p,r);if(!e)return null;const{assetType:t}=e;if(n.checkForConversionRequired&&(t===l||t===c))return null;a.includes(t)&&(u=!0),i.push(e)}return u?i:null}function I(e,t){const s=(0,p.fH)(e,t);return s?{asset:e,assetType:s}:null}async function U(e,t,s){return B(e.map(e=>async function(e,t){const{asset:s,assetType:n}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:n};const o=await s.toBlob(t);return(0,a.Te)(t),{blob:o,assetName:s.assetName,assetType:n}}(e,s)),t,s)}async function B(e,t,s){const n=w(d.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),o=await function(e,t,s){const n=w(e.length,s?.onProgress,"prepareAssetItems");return Promise.all(e.map(async(e,o)=>{const i=async function(e,t,s){const{blob:n,assetType:o,assetName:i}=e;let c=null;try{const e=await _({data:n,name:i},t.url,s);(0,a.Te)(s),c={assetType:o,assetUploadId:e.itemID}}catch(F){(0,a.QP)(F),r.A.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!c){const e=await(0,l._0)(n);if((0,a.Te)(s),!e.isBase64)throw new f.$1;c={assetType:o,assetData:e.data}}if(!c)throw new f.WF;return{item:c,assetName:i}}(await e,t,{...s,onProgress:n.makeOnProgress(o)});return(0,a.Te)(s),i}))}(e,t,{...s,onProgress:n.makeOnProgress("prepareAssetItems")});(0,a.Te)(s);const i=o.map(e=>{let{item:t}=e;return t}),{uploadResults:c}=await O(i,t,{...s,onProgress:n.makeOnProgress("uploadAssetItems")});return(0,a.Te)(s),e.map((e,s)=>function(e,t,s){const{success:n}=t;if(!n){const{error:s}=t;throw new f.hK(e.assetName,s)}const{assetHash:o}=t,{assetName:r,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=s,l=(0,k.Fm)(a,i);if(!l)throw new f.H2(a);return new p.Qp(r,l,[new p.Bq(`${s.parsedUrl.path}/assets/${o}`,o)])}(o[s],c[s],t))}async function O(e,t,s){const o=T(s?.onProgress);try{const o=await(0,n.A)((0,l.fj)(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,a.Te)(s),o.data.uploadResults.length!==e.length)throw new f.nS(e.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}function Y(e,t){return(0,n.A)(e,t)}async function Z(e,t){const s=(await(0,n.A)(e,t)).data.statusUrl;for(;;){const e=(await(0,n.A)(s,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,n.A)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,a.Pl)(X)}}function q(e){let{infoFor3D:t}=e;const s=(0,k.U9)(t);if(!s)throw new f.uh;return s}const X=(0,i.l5)(1e3)}}]);
//# sourceMappingURL=99845.f6a48b3c.chunk.js.map